// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: example1.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TestMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String = String()

  var name: String = String()

  /// Repeated scalars were not encoded so efficiently in the past, so it's best to specify newer encodeing. Not necessary in Proto3.
  var samples: [Int32] = []

  var corpus: TestMessage.Corpus = .universal

  var subMessage: TestMessage.TestSubMessage {
    get {return _subMessage ?? TestMessage.TestSubMessage()}
    set {_subMessage = newValue}
  }
  /// Returns true if `subMessage` has been explicitly set.
  var hasSubMessage: Bool {return self._subMessage != nil}
  /// Clears the value of `subMessage`. Subsequent reads from it will return its default value.
  mutating func clearSubMessage() {self._subMessage = nil}

  /// Nested structure defined in a higher scope is fine
  var locations: [Geolocation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Enums
  enum Corpus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case universal // = 0
    case web // = 1
    case images // = 2
    case local // = 3
    case news // = 4
    case products // = 5
    case video // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .universal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .universal
      case 1: self = .web
      case 2: self = .images
      case 3: self = .local
      case 4: self = .news
      case 5: self = .products
      case 6: self = .video
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .universal: return 0
      case .web: return 1
      case .images: return 2
      case .local: return 3
      case .news: return 4
      case .products: return 5
      case .video: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Nested structure is fine
  struct TestSubMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var gotSubMessage: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _subMessage: TestMessage.TestSubMessage? = nil
}

#if swift(>=4.2)

extension TestMessage.Corpus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [TestMessage.Corpus] = [
    .universal,
    .web,
    .images,
    .local,
    .news,
    .products,
    .video,
  ]
}

#endif  // swift(>=4.2)

struct Geolocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var longitude: Double = 0

  var latitude: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension TestMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "name"),
    3: .same(proto: "samples"),
    6: .same(proto: "corpus"),
    7: .same(proto: "subMessage"),
    8: .same(proto: "locations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.samples) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.corpus) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._subMessage) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.locations) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.samples.isEmpty {
      try visitor.visitPackedInt32Field(value: self.samples, fieldNumber: 3)
    }
    if self.corpus != .universal {
      try visitor.visitSingularEnumField(value: self.corpus, fieldNumber: 6)
    }
    if let v = self._subMessage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.locations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.locations, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TestMessage, rhs: TestMessage) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.samples != rhs.samples {return false}
    if lhs.corpus != rhs.corpus {return false}
    if lhs._subMessage != rhs._subMessage {return false}
    if lhs.locations != rhs.locations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TestMessage.Corpus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNIVERSAL"),
    1: .same(proto: "WEB"),
    2: .same(proto: "IMAGES"),
    3: .same(proto: "LOCAL"),
    4: .same(proto: "NEWS"),
    5: .same(proto: "PRODUCTS"),
    6: .same(proto: "VIDEO"),
  ]
}

extension TestMessage.TestSubMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TestMessage.protoMessageName + ".TestSubMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gotSubMessage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.gotSubMessage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.gotSubMessage != false {
      try visitor.visitSingularBoolField(value: self.gotSubMessage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TestMessage.TestSubMessage, rhs: TestMessage.TestSubMessage) -> Bool {
    if lhs.gotSubMessage != rhs.gotSubMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Geolocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Geolocation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "longitude"),
    2: .same(proto: "latitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 1)
    }
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Geolocation, rhs: Geolocation) -> Bool {
    if lhs.longitude != rhs.longitude {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
